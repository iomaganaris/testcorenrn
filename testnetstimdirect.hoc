{load_file("nrngui.hoc")}
{load_file("defvar.hoc")}

ncell = 10
objref pc, cell, cells, nil, vec, vecs, r, netcons, nc
pc = new ParallelContext()

cells = new List()
netcons = new List()

begintemplate Cell
public soma, vvec, ivec, syn
create soma
objref vvec, ivec, syn
proc init() {
  soma {
    insert pas  e_pas=-65  g_pas = 0.0001
    syn = new ExpSyn(.5)  syn.e = 0  syn.g = 0.001
    vvec = new Vector()
    vvec.record(&v(.5))
    ivec = new Vector()
    ivec.record(&i_pas(.5))
  }
}
endtemplate Cell

for (gid = pc.id; gid < ncell; gid += pc.nhost) {
  pc.set_gid2node(gid, pc.id)
if (1 && gid < pc.nhost) {
  cell = new Cell()
  cells.append(cell)
  pc.cell(gid, new NetCon(&cell.soma.v(.5), nil))
  continue
}
  cell = new NetStim()
  cell.start=1
  pc.cell(gid, new NetCon(cell, nil))
  cells.append(cell)
  nc = new NetCon(cell, cells.o(0).syn)
  netcons.append(nc)
  nc.delay = 1.0
  nc.weight[0] = 1.0
}

objref tvec, idvec
tvec = new Vector()
idvec = new Vector()
pc.spike_record(-1, tvec, idvec)

cvode.cache_efficient(1)
pc.set_maxstep(10)
stdinit()

use_coreneuron = 1
prun("")
use_coreneuron = 0

objref vvecsav, ivecsav
vvecsav = cells.o(0).vvec.c()
ivecsav = cells.o(0).ivec.c()
cells.o(0).vvec.resize(0)
cells.o(0).ivec.resize(0)

stdinit()
tsav = startsw()
pc.psolve(tstop)
if (pc.id == 0) { printf("psolve time %g\n", startsw() - tsav) }
printf("vvec cmp = %d ivec cmp = %d\n", vvecsav.eq(cells.o(0).vvec), ivecsav.eq(cells.o(0).ivec))
if (0) for i=0, 100{
  printf("%d %g %g\n", i, vvecsav.x[i], cells.o(0).vvec.x[i])
}

strdef s
sprint(s, "out%d.dat", pc.id)
objref f
f = new File()
f.wopen(s)
for i=0, tvec.size-1 {
  f.printf("%g %d\n", tvec.x[i], idvec.x[i])
}
f.close()

pc.barrier()
quit()

