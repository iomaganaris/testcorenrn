{load_file("nrngui.hoc")}


ncell = 10
objref pc, cell, cells, nil, vec, vecs, r
pc = new ParallelContext()

cells = new List()
vecs = new List()

begintemplate Cell
public soma
create soma
proc init() {
  soma { insert pas  e_pas=-65  g_pas = 0.0001 }
}
endtemplate Cell

for (gid = pc.id; gid < ncell; gid += pc.nhost) {
  pc.set_gid2node(gid, pc.id)
if (gid < pc.nhost) {
  cell = new Cell()
  cells.append(cell)
  pc.cell(gid, new NetCon(&cell.soma.v(.5), nil))
  continue
}
  cell = new VecStim()
  vec = new Vector(10)
  vec.indgen(.1*gid, 1)
  cell.play(vec)
  vecs.append(vec)
  pc.cell(gid, new NetCon(cell, nil))
  cells.append(cell)
}

objref tvec, idvec
tvec = new Vector()
idvec = new Vector()
pc.spike_record(-1, tvec, idvec)

cvode.cache_efficient(1)
pc.set_maxstep(10)
stdinit()

pc.nrncore_run("-e 100")

stdinit()
tsav = startsw()
pc.psolve(100)
if (pc.id == 0) { printf("psolve time %g\n", startsw() - tsav) }

strdef s
sprint(s, "out%d.dat", pc.id)
objref f
f = new File()
f.wopen(s)
for i=0, tvec.size-1 {
  f.printf("%g %d\n", tvec.x[i], idvec.x[i])
}
f.close()

pc.barrier()
quit()

